server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;

    # DNS resolver - usa DNS da VPC do AWS ECS ou fallback para público
    # O 169.254.169.253 é o DNS da VPC da AWS
    resolver 169.254.169.253 8.8.8.8 8.8.4.4 valid=300s ipv6=off;
    resolver_timeout 10s;
    
    set $viacep_host "viacep.com.br";

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"ok","service":"opencep-api","timestamp":"$time_iso8601"}\n';
        add_header Content-Type application/json;
    }

    # Pesquisa por CEP com hífen (12345-678) - remove o hífen e busca local/fallback
    location ~ "^/ws/([0-9]{5})-([0-9]{3})/(json|xml)/?$" {
        set $cep_part1 $1;
        set $cep_part2 $2;
        set $cep_clean "${cep_part1}${cep_part2}";
        rewrite ^ /internal-cep/$cep_clean/$cep_part1/$cep_part2 last;
    }

    # Location interna para servir CEPs (com fallback)
    location ~ "^/internal-cep/(?<cep>[0-9]{8})/(?<part1>[0-9]{5})/(?<part2>[0-9]{3})$" {
        internal;
        try_files /v1/$cep.json @fallback_viacep_formatted;
        default_type application/json;
    }

    # Fallback que usa os parts para reconstruir URL com hífen
    location @fallback_viacep_formatted {
        proxy_pass https://$viacep_host/ws/$part1-$part2/json/;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        proxy_set_header Host $viacep_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Pesquisa por CEP sem hífen (12345678) - tenta local primeiro, depois fallback para ViaCEP
    location ~ "^/ws/(?<cep>[0-9]{8})/(json|xml)/?$" {
        try_files /v1/$cep.json @fallback_viacep;
        default_type application/json;
    }

    # Pesquisa por endereço (UF/Cidade/Logradouro) - proxy direto para ViaCEP
    # Exemplos: /ws/RS/Porto Alegre/Domingos/json
    #           /ws/RS/Porto Alegre/Domingos Jose/json
    location ~ "^/ws/(?<uf>[A-Z]{2})/(?<cidade>[^/]+)/(?<logradouro>[^/]+)/(json|xml)/?$" {
        proxy_pass https://$viacep_host$request_uri;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        proxy_set_header Host $viacep_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Fallback para ViaCEP quando CEP não tem hífen
    location @fallback_viacep {
        proxy_pass https://$viacep_host$request_uri;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        proxy_set_header Host $viacep_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    location ~ "^/v1/(?<cep_opencep>\d+)/?\.?json?$" {
        try_files $uri $uri.json =404;
        default_type application/json;
    }
}